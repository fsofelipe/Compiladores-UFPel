PARSER_BEGIN(Mojica)
import java.io.*;
public class Mojica {

  public static void main(String args[]) throws ParseException,IOException {
    
    Mojica mojica = new Mojica(new FileInputStream(args[0]));
    mojica.Prog();
  }

}

PARSER_END(Mojica)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <VOID: "void">
| <MAIN: "main">
| <LBRACE:"(">
| <RBRACE: ")">
| <LCURLY:"{">
| <RCURLY:"}">
| <INT: "int">
| <BOOL: "bool">
| <ATR: ":=" >
| <PTV: ";">
| <VG: ",">
| <IF: "if">
| <DO: "do">
| <WHILE: "while">
| <RETURN: "return">
| <TRUE: "true">
| <FALSE: "false">
| <NOT: "not">
| <AND: "and">
| <OR: "or">
| <LEQ: "leq">
| <TID : ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])*>
| <NUMLIT: (["0"-"9"])+ ("."((["0"-"9"])+))? ("E" ("+" | "-")? ((["0"-"9"])+))?>
| <OPA: ("+"|"-")>
| <OPM: ("*"|"/")>
| <SKP: "skip();">
}

void Prog () :
{}
{ 
  main() lfunc() <EOF>
}
	
void main () :
{}
{
  <VOID> <MAIN> <LBRACE> <RBRACE>
  <LCURLY>
  vardecl()
  seqcomandos()
  <RCURLY> 
}

void vardecl () :
{}
{
  (tipo() <TID> <PTV>)*
}

void tipo () :
{}
{
  <INT> | <BOOL>
}

void seqcomandos () :
{}
{
  comando() (seqcomandos())?
}

void comando () :
{}
{
  <SKP> 
  |<TID> comando2() 
  |<IF> <LBRACE> boolexp() <RBRACE> <LCURLY> seqcomandos() <RCURLY>
  |<WHILE> <LBRACE> boolexp() <RBRACE> <DO> <LCURLY> seqcomandos() <RCURLY>
  | <RETURN> tiporeturn() <PTV>
}

void comando2 () :
{}
{
  <ATR> exps() <PTV> | <LBRACE> listaexp() <RBRACE> <PTV>
}

void boolexp () :
{}
{
  <TRUE> | <FALSE> 
  |<NOT> <LBRACE> boolexp() <RBRACE> 
  |<AND> <LBRACE> boolexp() <RBRACE> <LBRACE> boolexp() <RBRACE>
  |<OR> <LBRACE> boolexp() <RBRACE> <LBRACE> boolexp() <RBRACE>
  |<LEQ> <LBRACE> exps() <RBRACE> <LBRACE> exps() <RBRACE>
}

void tiporeturn () :
{}
{
  exps() | boolexp()
}

void exps () :
{}
{
  termo() exps1()
}

void exps1 () :
{}
{
  (<OPA> termo() exps1())?
}

void termo () :
{}
{
  fator() termo1()
}

void termo1 () :
{}
{
  (<OPM> fator() termo1())?
}

void fator () :
{}
{
  <TID> (<LBRACE> listaexp() <RBRACE>)? 
  | <NUMLIT> 
  | <LBRACE> exps() <RBRACE>
}

void listaexp () :
{}
{
  exps() listaexp1()
} 

void listaexp1 () :
{}
{
  (<VG> exps() listaexp1())?
}

void lfunc () :
{}
{
  (func() lfunc())?
}

void func () :
{}
{
  tipo() <TID> <LBRACE> listaarg() <RBRACE> <LCURLY> vardecl() seqcomandos() <RCURLY>
}

void listaarg () :
{}
{
  tipo() <TID> listaarg2()
}

void listaarg2 () :
{}
{
  (<VG> tipo() <TID> listaarg2())?
}
